#include <Arduino.h>
#include <FreeRTOS.h>
#include <task.h>

#define MAX_SIZE 10

typedef struct {
  int items[MAX_SIZE];
  int front;
  int rear;
  int count;
} CircularQueue;

CircularQueue queue;

void initQueue(CircularQueue *q) {
  q->front = 0;
  q->rear = -1;
  q->count = 0;
}

bool isEmpty(CircularQueue *q) {
  return q->count == 0;
}

bool isFull(CircularQueue *q) {
  return q->count == MAX_SIZE;
}

bool enqueue(CircularQueue *q, int value) {
  if (isFull(q)) {
    Serial.println("Queue is full");
    return false;
  }
  q->rear = (q->rear + 1) % MAX_SIZE;
  q->items[q->rear] = value;
  q->count++;
  return true;
}

bool dequeue(CircularQueue *q, int *value) {
  if (isEmpty(q)) {
    Serial.println("Queue is empty");
    return false;
  }
  *value = q->items[q->front];
  q->front = (q->front + 1) % MAX_SIZE;
  q->count--;
  return true;
}

int peek(CircularQueue *q) {
  if (isEmpty(q)) {
    Serial.println("Queue is empty");
    return -1;
  }
  return q->items[q->front];
}

void displayQueue(CircularQueue *q) {
  if (isEmpty(q)) {
    Serial.println("Queue is empty");
    return;
  }

  Serial.print("Queue elements: ");
  for (int i = 0; i < q->count; i++) {
    int index = (q->front + i) % MAX_SIZE;
    Serial.print(q->items[index]);
    Serial.print(" ");
  }
  Serial.println();
}

void vQueueTask(void *pvParameters) {
  (void)pvParameters;

  initQueue(&queue);

  Serial.println("Circular Queue Example");

  enqueue(&queue, 1);
  enqueue(&queue, 2);
  enqueue(&queue, 3);
  enqueue(&queue, 4);
  enqueue(&queue, 5);

  displayQueue(&queue);

  int value;
  dequeue(&queue, &value);
  Serial.print("Dequeued: ");
  Serial.println(value);
  dequeue(&queue, &value);
  Serial.print("Dequeued: ");
  Serial.println(value);

  displayQueue(&queue);

  enqueue(&queue, 6);
  enqueue(&queue, 7);
  enqueue(&queue, 8);

  displayQueue(&queue);

  Serial.print("Front element: ");
  Serial.println(peek(&queue));

  while (dequeue(&queue, &value)) {
    Serial.print("Dequeued: ");
    Serial.println(value);
    displayQueue(&queue);
    vTaskDelay(pdMS_TO_TICKS(500));
  }

  vTaskDelete(NULL);
}

void setup() {
  Serial.begin(9600);
  while (!Serial) {}

  xTaskCreate(
    vQueueTask,
    "QueueTask",
    1024,
    NULL,
    1,
    NULL
  );
}

void loop() {}
