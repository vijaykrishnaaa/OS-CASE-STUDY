#include <Arduino.h>

#define MAX_SIZE 10

typedef struct {
  int items[MAX_SIZE];
  int front;
  int rear;
  int count;
} CircularQueue;

void initQueue(CircularQueue *q) {
  q->front = 0;
  q->rear = -1;
  q->count = 0;
}

bool isEmpty(CircularQueue *q) {
  return q->count == 0;
}

bool isFull(CircularQueue *q) {
  return q->count == MAX_SIZE;
}

bool enqueue(CircularQueue *q, int value) {
  if (isFull(q)) {
    Serial.println("Queue is full");
    return false;
  }
  
  q->rear = (q->rear + 1) % MAX_SIZE;
  q->items[q->rear] = value;
  q->count++;
  return true;
}

bool dequeue(CircularQueue *q, int *value) {
  if (isEmpty(q)) {
    Serial.println("Queue is empty");
    return false;
  }
  
  *value = q->items[q->front];
  q->front = (q->front + 1) % MAX_SIZE;
  q->count--;
  return true;
}

int peek(CircularQueue *q) {
  if (isEmpty(q)) {
    Serial.println("Queue is empty");
    return -1;
  }
  return q->items[q->front];
}

void displayQueue(CircularQueue *q) {
  if (isEmpty(q)) {
    Serial.println("Queue is empty");
    return;
  }
  
  Serial.print("Queue elements: ");
  int i, index;
  for (i = 0; i < q->count; i++) {
    index = (q->front + i) % MAX_SIZE;
    Serial.print(q->items[index]);
    Serial.print(" ");
  }
  Serial.println();
}

CircularQueue queue;

void setup() {
  Serial.begin(9600);
  while (!Serial) {}
  
  Serial.println("Circular Queue Example");
  
  initQueue(&queue);
  
  Serial.println("Adding elements: 1,2,3,4,5");
  enqueue(&queue, 1);
  enqueue(&queue, 2);
  enqueue(&queue, 3);
  enqueue(&queue, 4);
  enqueue(&queue, 5);
  
  displayQueue(&queue);
  
  int value;
  Serial.println("Removing 2 elements");
  dequeue(&queue, &value);
  Serial.print("Dequeued: ");
  Serial.println(value);
  dequeue(&queue, &value);
  Serial.print("Dequeued: ");
  Serial.println(value);
  
  displayQueue(&queue);
  
  Serial.println("Adding elements: 6,7,8");
  enqueue(&queue, 6);
  enqueue(&queue, 7);
  enqueue(&queue, 8);
  
  displayQueue(&queue);
  
  Serial.print("Front element: ");
  Serial.println(peek(&queue));
  
  Serial.println("Removing all elements");
  while (dequeue(&queue, &value)) {
    Serial.print("Dequeued: ");
    Serial.println(value);
    displayQueue(&queue);
  }
}

void loop() {
  delay(1000);
}
