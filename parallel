#include <Arduino.h>

#define MAX_QUEUE_SIZE 10
#define NUM_QUEUES 3

typedef struct {
  int items[MAX_QUEUE_SIZE];
  int front;
  int rear;
  int count;
  int queueNumber;
  int processedItems;
} Queue;

Queue queues[NUM_QUEUES];
int totalItems = 0;
int processedItems = 0;

void initQueues() {
  for (int i = 0; i < NUM_QUEUES; i++) {
    queues[i].front = 0;
    queues[i].rear = -1;
    queues[i].count = 0;
    queues[i].queueNumber = i + 1;
    queues[i].processedItems = 0;
  }
}

bool isEmpty(Queue *q) {
  return q->count == 0;
}

bool isFull(Queue *q) {
  return q->count == MAX_QUEUE_SIZE;
}

bool enqueue(Queue *q, int value) {
  if (isFull(q)) {
    return false;
  }
  
  q->rear = (q->rear + 1) % MAX_QUEUE_SIZE;
  q->items[q->rear] = value;
  q->count++;
  return true;
}

bool dequeue(Queue *q, int *value) {
  if (isEmpty(q)) {
    return false;
  }
  
  *value = q->items[q->front];
  q->front = (q->front + 1) % MAX_QUEUE_SIZE;
  q->count--;
  q->processedItems++;
  return true;
}

void displayQueue(Queue *q) {
  if (isEmpty(q)) {
    Serial.print("Queue ");
    Serial.print(q->queueNumber);
    Serial.println(": Empty");
    return;
  }
  
  Serial.print("Queue ");
  Serial.print(q->queueNumber);
  Serial.print(": [");
  
  int i = q->front;
  int itemsToDisplay = q->count;
  
  while (itemsToDisplay > 0) {
    Serial.print(q->items[i]);
    
    itemsToDisplay--;
    if (itemsToDisplay > 0) {
      Serial.print(", ");
    }
    
    i = (i + 1) % MAX_QUEUE_SIZE;
  }
  
  Serial.println("]");
}

void displayAllQueues() {
  Serial.println("Current Queue States:");
  for (int i = 0; i < NUM_QUEUES; i++) {
    displayQueue(&queues[i]);
  }
  Serial.println();
}

int findShortestQueue() {
  int minLength = MAX_QUEUE_SIZE;
  int minIndex = 0;
  
  for (int i = 0; i < NUM_QUEUES; i++) {
    if (queues[i].count < minLength) {
      minLength = queues[i].count;
      minIndex = i;
    }
  }
  
  return minIndex;
}

void addItem(int value) {
  int queueIndex = findShortestQueue();
  if (enqueue(&queues[queueIndex], value)) {
    totalItems++;
    Serial.print("Added item ");
    Serial.print(value);
    Serial.print(" to Queue ");
    Serial.println(queueIndex + 1);
  } else {
    Serial.println("Failed to add item - all queues full");
  }
}

void processQueues() {
  for (int i = 0; i < NUM_QUEUES; i++) {
    int value;
    if (dequeue(&queues[i], &value)) {
      processedItems++;
      Serial.print("Processed item ");
      Serial.print(value);
      Serial.print(" from Queue ");
      Serial.println(i + 1);
    }
  }
}

void printStats() {
  Serial.println("\n----- STATISTICS -----");
  Serial.print("Total items added: ");
  Serial.println(totalItems);
  Serial.print("Total items processed: ");
  Serial.println(processedItems);
  
  Serial.println("\nItems processed per queue:");
  for (int i = 0; i < NUM_QUEUES; i++) {
    Serial.print("Queue ");
    Serial.print(i + 1);
    Serial.print(": ");
    Serial.print(queues[i].processedItems);
    Serial.print(" items (");
    
    if (totalItems > 0) {
      float percentage = (float)queues[i].processedItems / totalItems * 100;
      Serial.print(percentage);
      Serial.println("%)");
    } else {
      Serial.println("0%)");
    }
  }
}

void setup() {
  Serial.begin(9600);
  while (!Serial) {}
  
  randomSeed(analogRead(0));
  
  Serial.println("Parallel Queue System");
  initQueues();
  
  Serial.println("Adding items to queues...");
  for (int i = 1; i <= 20; i++) {
    addItem(i);
  }
  
  displayAllQueues();
  
  Serial.println("Processing items from queues...");
  for (int i = 0; i < 5; i++) {
    processQueues();
    displayAllQueues();
  }
  
  Serial.println("Adding more items...");
  for (int i = 21; i <= 30; i++) {
    addItem(i);
  }
  
  displayAllQueues();
  
  Serial.println("Processing remaining items...");
  while (processedItems < totalItems) {
    processQueues();
  }
  
  printStats();
}

void loop() {
  delay(1000);
}
