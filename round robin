#include <Arduino.h>

#define MAX_PROCESSES 10
#define TIME_QUANTUM 2

typedef struct {
  int id;
  int burstTime;
  int remainingTime;
  int waitingTime;
  int turnaroundTime;
  bool completed;
} Process;

typedef struct {
  Process processes[MAX_PROCESSES];
  int front;
  int rear;
  int count;
  int size;
} RoundRobinQueue;

void initQueue(RoundRobinQueue *q, int size) {
  q->front = 0;
  q->rear = -1;
  q->count = 0;
  q->size = size;
  
  for (int i = 0; i < size; i++) {
    q->processes[i].id = i + 1;
    q->processes[i].completed = false;
    q->processes[i].waitingTime = 0;
    q->processes[i].turnaroundTime = 0;
  }
}

bool isEmpty(RoundRobinQueue *q) {
  return q->count == 0;
}

bool isFull(RoundRobinQueue *q) {
  return q->count == q->size;
}

void enqueue(RoundRobinQueue *q, Process p) {
  if (isFull(q)) {
    return;
  }
  
  q->rear = (q->rear + 1) % MAX_PROCESSES;
  q->processes[q->rear] = p;
  q->count++;
}

Process dequeue(RoundRobinQueue *q) {
  Process p = q->processes[q->front];
  q->front = (q->front + 1) % MAX_PROCESSES;
  q->count--;
  return p;
}

void displayProcessInfo(Process p) {
  Serial.print("Process ID: ");
  Serial.print(p.id);
  Serial.print(", Burst Time: ");
  Serial.print(p.burstTime);
  Serial.print(", Waiting Time: ");
  Serial.print(p.waitingTime);
  Serial.print(", Turnaround Time: ");
  Serial.println(p.turnaroundTime);
}

void executeRoundRobin(RoundRobinQueue *q) {
  int currentTime = 0;
  int completed = 0;
  Process current;
  
  Serial.println("Executing Round Robin with time quantum: " + String(TIME_QUANTUM));
  
  while (completed < q->size) {
    if (isEmpty(q)) {
      currentTime++;
      continue;
    }
    
    current = dequeue(q);
    
    Serial.print("Time ");
    Serial.print(currentTime);
    Serial.print(": Executing Process ");
    Serial.println(current.id);
    
    int executionTime = min(TIME_QUANTUM, current.remainingTime);
    current.remainingTime -= executionTime;
    currentTime += executionTime;
    
    for (int i = q->front; i != (q->rear + 1) % MAX_PROCESSES && q->count > 0; i = (i + 1) % MAX_PROCESSES) {
      q->processes[i].waitingTime += executionTime;
    }
    
    if (current.remainingTime > 0) {
      enqueue(q, current);
    } else {
      current.completed = true;
      current.turnaroundTime = currentTime;
      completed++;
      
      Serial.print("Process ");
      Serial.print(current.id);
      Serial.println(" completed");
    }
  }
  
  Serial.println("All processes completed");
}

void displayResults(RoundRobinQueue *q) {
  float avgWaitingTime = 0;
  float avgTurnaroundTime = 0;
  
  Serial.println("\nProcess Results:");
  for (int i = 0; i < q->size; i++) {
    displayProcessInfo(q->processes[i]);
    avgWaitingTime += q->processes[i].waitingTime;
    avgTurnaroundTime += q->processes[i].turnaroundTime;
  }
  
  avgWaitingTime /= q->size;
  avgTurnaroundTime /= q->size;
  
  Serial.print("\nAverage Waiting Time: ");
  Serial.println(avgWaitingTime);
  Serial.print("Average Turnaround Time: ");
  Serial.println(avgTurnaroundTime);
}

void setup() {
  Serial.begin(9600);
  while (!Serial) {}
  
  Serial.println("Round Robin Scheduling Algorithm");
  
  RoundRobinQueue queue;
  int numProcesses = 4;
  
  initQueue(&queue, numProcesses);
  
  int burstTimes[4] = {10, 5, 8, 12};
  
  for (int i = 0; i < numProcesses; i++) {
    queue.processes[i].burstTime = burstTimes[i];
    queue.processes[i].remainingTime = burstTimes[i];
    enqueue(&queue, queue.processes[i]);
  }
  
  Serial.println("Initial Process Information:");
  for (int i = 0; i < numProcesses; i++) {
    Serial.print("Process ");
    Serial.print(i + 1);
    Serial.print(": Burst Time = ");
    Serial.println(burstTimes[i]);
  }
  
  executeRoundRobin(&queue);
  displayResults(&queue);
}

void loop() {
  delay(1000);
}
